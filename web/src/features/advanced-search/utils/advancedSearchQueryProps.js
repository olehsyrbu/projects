import PropTypes from 'prop-types';
import { provideDefaultCoordinates } from '@/core/components/Map';
import {
  SEARCH_CATEGORIES,
  SEARCH_WORK_SETTING,
  SEARCH_MODES_ALL,
  TYPE_PERSON,
  TYPE_PROGRAM,
} from '@/modules/search/utils';
import { COUNTRY_ZOOM } from '@/features/advanced-search/utils';

export const advancedSearchQueryProps = () =>
  PropTypes.shape({
    modes: PropTypes.arrayOf(PropTypes.oneOf([TYPE_PERSON, TYPE_PROGRAM])),
    category: PropTypes.oneOf(Object.values(SEARCH_CATEGORIES)),
    accommodation: PropTypes.arrayOf(PropTypes.string),
    centerMap: PropTypes.shape({
      lat: PropTypes.number,
      lng: PropTypes.number,
    }),
    bounds: PropTypes.object,
    zoomMap: PropTypes.number,
    genders: PropTypes.arrayOf(PropTypes.string),
    religions: PropTypes.arrayOf(PropTypes.string),
    languages: PropTypes.arrayOf(PropTypes.string),
    ethnicities: PropTypes.arrayOf(PropTypes.string),
    specialties: PropTypes.arrayOf(PropTypes.string),
    ageGroups: PropTypes.arrayOf(PropTypes.string),
    modalities: PropTypes.arrayOf(PropTypes.string),
    day: PropTypes.arrayOf(PropTypes.string),
    treatments: PropTypes.arrayOf(PropTypes.string),
    services: PropTypes.arrayOf(PropTypes.string),
    programs: PropTypes.arrayOf(PropTypes.string),
    programTypes: PropTypes.arrayOf(PropTypes.string),
    providerTypes: PropTypes.arrayOf(PropTypes.string),
    sexualIdentities: PropTypes.arrayOf(PropTypes.string),
    canPrescribeMedication: PropTypes.bool,
    isAcceptingNewClients: PropTypes.bool,
    canAssistWithDailyLiving: PropTypes.bool,
    treatsMedicallyUnstable: PropTypes.bool,
    treatsSuicidalIdeation: PropTypes.bool,
    location: PropTypes.string,
    organizationSubdomain: PropTypes.string,
    startTime: PropTypes.string,
    endTime: PropTypes.string,
    timeZone: PropTypes.string,
    setting: PropTypes.oneOf(Object.values(SEARCH_WORK_SETTING)),
    networkInsurance: PropTypes.arrayOf(PropTypes.string),
    paymentMethods: PropTypes.arrayOf(PropTypes.string),
    query: PropTypes.string,
    page: PropTypes.number,
    limit: PropTypes.number,
    distance: PropTypes.shape({
      max: PropTypes.number,
      min: PropTypes.number,
    }),
    organizationTypes: PropTypes.arrayOf(PropTypes.string),
    sort: PropTypes.object,
    locationCoordinates: PropTypes.object,
    specialGroups: PropTypes.arrayOf(PropTypes.string),
    hasPsypact: PropTypes.bool,
  });

export const programQueryDefaultProps = {
  canAssistWithDailyLiving: false,
  treatsMedicallyUnstable: false,
  treatsSuicidalIdeation: false,
  programTypes: [],
  amenities: [],
  dietaryAccommodations: [],
};

export const personQueryDefaultProps = {
  rainbowMember: false,
  languages: [],
  modalities: [],
  treatments: [],
  providerTypes: [],
  canPrescribeMedication: false,
  endTime: undefined,
  startTime: undefined,
  timeZone: undefined,
  day: [],
  hasPsypact: false,
};

export const advancedSearchQueryDefaultProps = () => ({
  ...programQueryDefaultProps,
  ...personQueryDefaultProps,
  modes: SEARCH_MODES_ALL,
  specialties: [],
  location: '',
  category: SEARCH_CATEGORIES.BY_NAME,
  centerMap: provideDefaultCoordinates(),
  zoomMap: COUNTRY_ZOOM,
  bounds: {},
  organizationSubdomain: null,
  accommodation: [],
  setting: SEARCH_WORK_SETTING.BOTH,
  isAcceptingNewClients: true,
  networkInsurance: [],
  paymentMethods: [],
  genders: [],
  religions: [],
  ethnicities: [],
  services: [],
  programs: [],
  sexualIdentities: [],
  ageGroups: [],
  page: 1,
  limit: 20,
  distance: {
    max: 30 * 1000,
    min: 0,
  },
  organizationTypes: [],
  sort: { updated: 'DESC' },
  locationCoordinates: {},
  specialGroups: [],
  hasPsypact: false,
});
